input {
    background-color: transparent;
}
  input:focus {
    outline-width: 0px;
    outline-color: transparent;
}
  input:focus-visible {
    outline: unset;
  }

.input {
    border-radius: var(--rounded-btn, 0.375rem);
    border-width: 1px;
    border-color: var(--fallback-bc,oklch(var(--bc)/0.4));
    --tw-bg-opacity: 1;
    background-color: var(--fallback-b1,oklch(var(--b1)/var(--tw-bg-opacity, 1)));
    color: var(--fallback-bc,oklch(var(--bc)/0.8));
}

.input::placeholder {
    color: var(--fallback-bc,oklch(var(--bc)/0.5));
}

.input:hover {
    border-color: var(--fallback-bc,oklch(var(--bc)/0.6));
}

.input {
  transition:
    border-color 0.15s ease-in-out,
    box-shadow 0.15s ease-in-out;
}

.input::file-selector-button {
    border-start-start-radius: var(--rounded-btn, 0.375rem);
    border-end-start-radius: var(--rounded-btn, 0.375rem);
    border-width: 0px;
    background-color: var(--fallback-bc,oklch(var(--bc)/0.2));
    font-weight: 600;
    text-transform: uppercase;
    --tw-text-opacity: 1;
    color: var(--fallback-bc,oklch(var(--bc)/var(--tw-text-opacity, 1)));
    text-decoration-line: none;
}

.input[type="file"]:disabled {
    background-color: var(--fallback-n,oklch(var(--n)/0.1));
}

.input:focus,
  .input:focus-within {
    --tw-border-opacity: 1;
    border-color: var(--fallback-p,oklch(var(--p)/var(--tw-border-opacity, 1)));
    --tw-shadow: 0 1px 2px 0 var(--fallback-bs,oklch(var(--bs)/0.22));
    --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);
    box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
    --tw-shadow-color: var(--fallback-p,oklch(var(--p)/0.22));
    --tw-shadow: var(--tw-shadow-colored);
    --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
    --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);
    box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
    --tw-ring-opacity: 1;
    --tw-ring-color: var(--fallback-p,oklch(var(--p)/var(--tw-ring-opacity, 1)));
}

.input:-webkit-autofill,
  .input:-webkit-autofill:focus {
    --tw-bg-opacity: 1;
    background-color: var(--fallback-b1,oklch(var(--b1)/var(--tw-bg-opacity, 1)));
    --tw-text-opacity: 1;
    color: var(--fallback-bc,oklch(var(--bc)/var(--tw-text-opacity, 1)));
}

.input-floating::placeholder {
    color: transparent;
}

.input-floating:focus::placeholder {
    color: var(--fallback-bc,oklch(var(--bc)/0.5));
}

.input-filled {
    border-bottom-right-radius: 0px;
    border-bottom-left-radius: 0px;
    border-top-left-radius: 0.375rem;
    border-top-right-radius: 0.375rem;
    border-width: 0px;
    border-bottom-width: 1px;
    border-color: var(--fallback-bc,oklch(var(--bc)/0.6));
    background-color: var(--fallback-bc,oklch(var(--bc)/0.05));
}

.input-filled::placeholder {
    color: transparent;
}

.input-filled:hover {
    border-width: 0px;
    border-bottom-width: 1px;
    --tw-border-opacity: 1;
    border-color: var(--fallback-bc,oklch(var(--bc)/var(--tw-border-opacity, 1)));
}

.input-filled:focus-visible {
    outline-width: 0px;
}

.input-filled:focus,
    .input-filled:focus-within {
    --tw-border-opacity: 1;
    border-color: var(--fallback-p,oklch(var(--p)/var(--tw-border-opacity, 1)));
    --tw-shadow: 0 0 #0000;
    --tw-shadow-colored: 0 0 #0000;
    box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
    --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
    --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color);
    box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
}

.input-filled:focus::placeholder,
    .input-filled:focus-within::placeholder {
    color: var(--fallback-bc,oklch(var(--bc)/0.5));
}

.input-filled:focus ~ .input-filled-focused,
    .input-filled:focus-within ~ .input-filled-focused {
    --tw-scale-x: 1;
    --tw-scale-y: 1;
    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
    --tw-bg-opacity: 1;
    background-color: var(--fallback-p,oklch(var(--p)/var(--tw-bg-opacity, 1)));
}

.input[list]::-webkit-calendar-picker-indicator {
    line-height: 1em;
  }

.input.disabled,
  .input:disabled,
  .input[disabled] {
    pointer-events: none;
    border-width: 0px;
    border-color: var(--fallback-bc,oklch(var(--bc)/0.1));
    background-color: var(--fallback-n,oklch(var(--n)/0.1));
    color: var(--fallback-bc,oklch(var(--bc)/0.5));
}

.input::-webkit-date-and-time-value {
    text-align: inherit;
  }

.input.input-floating.disabled,
    .input.input-floating:disabled,
    .input.input-floating[disabled] {
    border-width: 1px;
    --tw-bg-opacity: 1;
    background-color: var(--fallback-b1,oklch(var(--b1)/var(--tw-bg-opacity, 1)));
}

.input.input-floating.disabled ~ .input-floating-label, .input.input-floating:disabled ~ .input-floating-label, .input.input-floating[disabled] ~ .input-floating-label {
    color: var(--fallback-bc,oklch(var(--bc)/0.5));
}

.input.input-filled.disabled,
    .input.input-filled:disabled,
    .input.input-filled[disabled] {
    border-bottom-width: 1px;
}

.input.input-filled.disabled ~ .input-filled-label, .input.input-filled:disabled ~ .input-filled-label, .input.input-filled[disabled] ~ .input-filled-label {
    color: var(--fallback-bc,oklch(var(--bc)/0.5));
}

.input-filled-label,
.input-floating-label {
    pointer-events: none;
    position: absolute;
    inset-inline-start: 0px;
    width: 100%;
    overflow: hidden;
    text-overflow: ellipsis;
    background-color: transparent;
    padding-left: 0.75rem;
    padding-right: 0.75rem;
    font-size: 1rem;
    line-height: 1.375rem;
    color: var(--fallback-bc,oklch(var(--bc)/0.8));
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 150ms;
    transition-timing-function: cubic-bezier(0.4, 0, 1, 1);
}

.peer:focus ~ .input-filled-label,.peer:focus ~ 
.input-floating-label {
    --tw-text-opacity: 1;
    color: var(--fallback-p,oklch(var(--p)/var(--tw-text-opacity, 1)));
}

.peer.input-lg ~ .input-filled-label,.peer.input-lg ~ 
.input-floating-label {
    font-size: 1.125rem;
    line-height: 1.5rem;
}

.peer.input-sm ~ .input-filled-label,.peer.input-sm ~ 
.input-floating-label {
    font-size: 0.875rem;
    line-height: 1.25rem;
}

.input-filled-label {
    top: 0.8rem;
}

.peer.input-lg ~ .input-filled-label {
    top: 1rem;
}

.peer.input-sm ~ .input-filled-label {
    top: 0.625rem;
}

.peer.input-lg ~ .input-filled-label {
    padding-left: 1rem;
    padding-right: 1rem;
}

.peer.input-sm ~ .input-filled-label {
    padding-left: 0.625rem;
    padding-right: 0.625rem;
}

.peer:focus ~ .input-filled-label,
  .peer:focus-within ~ .input-filled-label,
  .peer:not(:placeholder-shown) ~ .input-filled-label {
    top: 0.125rem;
    margin-inline-start: 0.75rem;
    width: fit-content;
    padding: 0px;
    font-size: 0.75rem;
    line-height: 1rem;
}

.peer.input-lg:focus ~ .input-filled-label,
  .peer.input-lg:focus-within ~ .input-filled-label,
  .peer.input-lg:not(:placeholder-shown) ~ .input-filled-label {
    margin-inline-start: 1rem;
    font-size: 0.875rem;
    line-height: 1.25rem;
}

.input.input-filled.input-sm:focus,
  .input.input-filled.input-sm:not(:placeholder-shown) {
    padding-top: 0.5rem;
}

.input.input-filled:focus,
  .input.input-filled.input-lg:focus,
  .input.input-filled:not(:placeholder-shown),
  .input.input-filled.input-lg:not(:placeholder-shown) {
    padding-top: 0.75rem;
}

.input-floating-label {
    top: 0.5rem;
}

.peer.input-lg ~ .input-floating-label {
    top: 0.7rem;
}

.peer.input-sm ~ .input-floating-label {
    top: 0.3rem;
}

.peer.input-lg ~ .input-floating-label {
    padding-left: 1rem;
    padding-right: 1rem;
}

.peer.input-sm ~ .input-floating-label {
    padding-left: 0.625rem;
    padding-right: 0.625rem;
}

.peer:focus ~ .input-floating-label,
  .peer:focus-within ~ .input-floating-label,
  .peer:not(:placeholder-shown) ~ .input-floating-label {
    top: 0px;
    margin-inline-start: 0.5rem;
    width: fit-content;
    --tw-translate-y: -50%;
    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
    --tw-bg-opacity: 1;
    background-color: var(--fallback-b1,oklch(var(--b1)/var(--tw-bg-opacity, 1)));
    padding-left: 0.25rem;
    padding-right: 0.25rem;
    font-size: 0.75rem;
    line-height: 1rem;
}

.peer.input-lg:focus ~ .input-floating-label,
  .peer.input-lg:focus-within ~ .input-floating-label,
  .peer.input-lg:not(:placeholder-shown) ~ .input-floating-label {
    margin-inline-start: 0.75rem;
    font-size: 0.875rem;
    line-height: 1.25rem;
}

/* Input group */

.input-group {
    position: relative;
    display: flex;
    width: 100%;
    align-items: stretch;
    border-radius: var(--rounded-btn, 0.375rem);
    border-width: 1px;
    border-color: var(--fallback-bc,oklch(var(--bc)/0.25));
    --tw-bg-opacity: 1;
    background-color: var(--fallback-b1,oklch(var(--b1)/var(--tw-bg-opacity, 1)));
}

.input-group:has(:hover) {
    border-color: var(--fallback-bc,oklch(var(--bc)/0.6));
}

.input-group:has(:focus),
  .input-group:has(:focus-within) {
    --tw-border-opacity: 1;
    border-color: var(--fallback-p,oklch(var(--p)/var(--tw-border-opacity, 1)));
    --tw-shadow: 0 1px 2px 0 var(--fallback-bs,oklch(var(--bs)/0.22));
    --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);
    box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
    --tw-shadow-color: var(--fallback-p,oklch(var(--p)/0.22));
    --tw-shadow: var(--tw-shadow-colored);
    --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
    --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);
    box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
    --tw-ring-opacity: 1;
    --tw-ring-color: var(--fallback-p,oklch(var(--p)/var(--tw-ring-opacity, 1)));
}

.input-group:has(input.disabled),
  .input-group:has(input:disabled),
  .input-group:has(input[disabled]) {
    pointer-events: none;
    border-color: var(--fallback-bc,oklch(var(--bc)/0.1));
    background-color: var(--fallback-n,oklch(var(--n)/0.1));
    color: var(--fallback-bc,oklch(var(--bc)/0.5));
}

.input-group .input {
    border-width: 0px;
    background-color: transparent;
}

.input-group .input:focus,
    .input-group .input:focus-within {
    --tw-shadow: 0 0 #0000;
    --tw-shadow-colored: 0 0 #0000;
    box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
    --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
    --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color);
    box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
}

.input-group .input.disabled,
    .input-group .input:disabled,
    .input-group .input[disabled] {
    background-color: transparent;
}

.input-group-filled {
    position: relative;
    display: flex;
    width: 100%;
    align-items: stretch;
    border-top-left-radius: 0.375rem;
    border-top-right-radius: 0.375rem;
    border-width: 0px;
    border-bottom-width: 1px;
    border-color: var(--fallback-bc,oklch(var(--bc)/0.6));
    background-color: var(--fallback-bc,oklch(var(--bc)/0.05));
}

.input-group-filled:has(:hover) {
    border-color: var(--fallback-bc,oklch(var(--bc)/0.6));
}

.input-group-filled:focus ~ .input-filled-focused,
  .input-group-filled:focus-within ~ .input-filled-focused {
    --tw-scale-x: 1;
    --tw-scale-y: 1;
    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
    --tw-bg-opacity: 1;
    background-color: var(--fallback-p,oklch(var(--p)/var(--tw-bg-opacity, 1)));
}

.input-group-filled .input {
    border-width: 0px;
    background-color: transparent;
}

.input-group-filled .input.disabled,
    .input-group-filled .input:disabled,
    .input-group-filled .input[disabled] {
    background-color: transparent;
}

/* input group text */

.input-group-text {
    display: flex;
    align-items: center;
    padding-left: 0.75rem;
    padding-right: 0.75rem;
    font-weight: 400;
    --tw-text-opacity: 1;
    color: var(--fallback-bc,oklch(var(--bc)/var(--tw-text-opacity, 1)));
  transition:
    border-color 0.15s ease-in-out,
    box-shadow 0.15s ease-in-out;
}

.input-group-text:first-child {
    border-start-start-radius: var(--rounded-btn, 0.375rem);
    border-end-start-radius: var(--rounded-btn, 0.375rem);
    padding-inline-end: 0px;
}

.input-group-text:last-child {
    border-start-end-radius: var(--rounded-btn, 0.375rem);
    border-end-end-radius: var(--rounded-btn, 0.375rem);
    padding-inline-start: 0px;
}

/* File input */

.input[type="file"].input-floating::file-selector-button {
    border-inline-end-width: 1px;
    border-color: var(--fallback-bc,oklch(var(--bc)/0.25));
    --tw-bg-opacity: 1;
    background-color: var(--fallback-b1,oklch(var(--b1)/var(--tw-bg-opacity, 1)));
}

/* State  */

.input.is-valid,
.validate .input:valid {
    --tw-border-opacity: 1;
    border-color: var(--fallback-su,oklch(var(--su)/var(--tw-border-opacity, 1)));
}

.input.is-valid:focus,
  .input.is-valid:focus-within,
  .validate .input:valid:focus,
  .validate .input:valid:focus-within {
    --tw-shadow-color: var(--fallback-su,oklch(var(--su)/0.22));
    --tw-shadow: var(--tw-shadow-colored);
    --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
    --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);
    box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
    --tw-ring-opacity: 1;
    --tw-ring-color: var(--fallback-su,oklch(var(--su)/var(--tw-ring-opacity, 1)));
}

.input.is-valid.input-filled:focus,
  .input.is-valid.input-filled:focus-within,
  .validate .input:valid.input-filled:focus,
  .validate .input:valid.input-filled:focus-within {
    --tw-border-opacity: 1;
    border-color: var(--fallback-su,oklch(var(--su)/var(--tw-border-opacity, 1)));
    --tw-shadow: 0 0 #0000;
    --tw-shadow-colored: 0 0 #0000;
    box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
    --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
    --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color);
    box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
}

.input.is-valid ~ .input-floating-label,
  .input.is-valid ~ .input-filled-label,
  .validate .input:valid ~ .input-floating-label,
  .validate .input:valid ~ .input-filled-label {
    --tw-text-opacity: 1;
    color: var(--fallback-su,oklch(var(--su)/var(--tw-text-opacity, 1)));
}

.input.is-valid:focus ~ .input-filled-focused,
  .input.is-valid:focus-within ~ .input-filled-focused,
  .validate .input:valid:focus ~ .input-filled-focused,
  .validate .input:valid:focus-within ~ .input-filled-focused {
    --tw-scale-x: 1;
    --tw-scale-y: 1;
    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
    --tw-bg-opacity: 1;
    background-color: var(--fallback-su,oklch(var(--su)/var(--tw-bg-opacity, 1)));
}

/* Top text */

.label:has(+ * .is-valid) > *, 
.label-text:has(+ * .is-valid), 
.label-text:has(~ .is-valid), 
.label:has(~ .is-valid) > *, 


.is-valid ~ .label, 
.is-valid ~ .label-text, 
.is-valid ~ .label .label-text,  
*:has(.is-valid) ~ .label, 
*:has(.is-valid) ~ .label-text, 
*:has(.is-valid) ~ .label .label-text, 



.validate .label:has(+ * .input:valid) > *, 
.validate .label-text:has(+ * .input:valid), 
.validate .label-text:has(~ .input:valid), 
.validate .label:has(~ .input:valid) > *, 


.validate .input:valid ~ .label, 
.validate .input:valid ~ .label.label-text, 
.validate .input:valid ~ .label .label-text,  
.validate *:has(.input:valid) ~ .label, 
.validate *:has(.input:valid) ~ .label-text, 
.validate *:has(.input:valid) ~ .label .label-text {
    --tw-text-opacity: 1;
    color: var(--fallback-su,oklch(var(--su)/var(--tw-text-opacity, 1)));
}

.input:focus.is-valid ~ .input-floating-label,
.input:focus.is-valid ~ .input-filled-label {
    --tw-text-opacity: 1;
    color: var(--fallback-su,oklch(var(--su)/var(--tw-text-opacity, 1)));
}

.input.is-invalid,
.validate .input:invalid {
    --tw-border-opacity: 1;
    border-color: var(--fallback-er,oklch(var(--er)/var(--tw-border-opacity, 1)));
}

.input.is-invalid:focus,
  .input.is-invalid:focus-within,
  .validate .input:invalid:focus,
  .validate .input:invalid:focus-within {
    --tw-shadow-color: var(--fallback-er,oklch(var(--er)/0.22));
    --tw-shadow: var(--tw-shadow-colored);
    --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
    --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);
    box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
    --tw-ring-opacity: 1;
    --tw-ring-color: var(--fallback-er,oklch(var(--er)/var(--tw-ring-opacity, 1)));
}

.input.is-invalid.input-filled:focus,
  .input.is-invalid.input-filled:focus-within,
  .validate .input:invalid.input-filled:focus,
  .validate .input:invalid.input-filled:focus-within {
    --tw-border-opacity: 1;
    border-color: var(--fallback-er,oklch(var(--er)/var(--tw-border-opacity, 1)));
    --tw-shadow: 0 0 #0000;
    --tw-shadow-colored: 0 0 #0000;
    box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
    --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
    --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color);
    box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
}

.input.is-invalid ~ .input-floating-label,
  .input.is-invalid ~ .input-filled-label,
  .validate .input:invalid ~ .input-floating-label,
  .validate .input:invalid ~ .input-filled-label {
    --tw-text-opacity: 1;
    color: var(--fallback-er,oklch(var(--er)/var(--tw-text-opacity, 1)));
}

.input.is-invalid:focus ~ .input-filled-focused,
  .input.is-invalid:focus-within ~ .input-filled-focused,
  .validate .input:invalid:focus ~ .input-filled-focused,
  .validate .input:invalid:focus-within ~ .input-filled-focused {
    --tw-scale-x: 1;
    --tw-scale-y: 1;
    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
    --tw-bg-opacity: 1;
    background-color: var(--fallback-er,oklch(var(--er)/var(--tw-bg-opacity, 1)));
}

/* Top text */

.label:has(+ * .is-invalid) > *, 
.label-text:has(+ * .is-invalid), 
.label-text:has(~ .is-invalid), 
.label:has(~ .is-invalid) > *, 


.is-invalid ~ .label, 
.is-invalid ~ .label-text, 
.is-invalid ~ .label .label-text,  
*:has(.is-invalid) ~ .label, 
*:has(.is-invalid) ~ .label-text, 
*:has(.is-invalid) ~ .label .label-text, 



.validate .label:has(+ * .input:invalid) > *, 
.validate .label-text:has(+ * .input:invalid), 
.validate .label-text:has(~ .input:invalid), 
.validate .label:has(~ .input:invalid) > *, 


.validate .input:invalid ~ .label, 
.validate .input:invalid ~ .label.label-text, 
.validate .input:invalid ~ .label .label-text,  
.validate *:has(.input:invalid) ~ .label, 
.validate *:has(.input:invalid) ~ .label-text, 
.validate *:has(.input:invalid) ~ .label .label-text {
    --tw-text-opacity: 1;
    color: var(--fallback-er,oklch(var(--er)/var(--tw-text-opacity, 1)));
}

.input:focus.is-invalid ~ .input-floating-label,
.input:focus.is-invalid ~ .input-filled-label {
    --tw-text-opacity: 1;
    color: var(--fallback-er,oklch(var(--er)/var(--tw-text-opacity, 1)));
}

/* State text */

.success-message {
    display: none;
    font-size: 0.875rem;
    line-height: 1.25rem;
    --tw-text-opacity: 1;
    color: var(--fallback-su,oklch(var(--su)/var(--tw-text-opacity, 1)));
}

/* .valid is a child class and when .message is parent. */

.validate *:has(> .input:valid) ~ .success-message,
.validate *:has(> .input:valid)  > * > .success-message,

.validate .input:valid ~ .success-message,
.validate .input:valid  + * > .success-message {
    display: block;
}

.error-message {
    display: none;
    font-size: 0.875rem;
    line-height: 1.25rem;
    --tw-text-opacity: 1;
    color: var(--fallback-er,oklch(var(--er)/var(--tw-text-opacity, 1)));
}

.validate *:has(> .input:invalid) ~ .error-message,
.validate *:has(> .input:invalid) > * > .error-message,

.validate .input:invalid ~ .error-message,
.validate .input:invalid + * > .error-message {
    display: block;
}

/* Input group State */

.validate .input-group > .input:valid,
.input-group > .input:valid,
.validate .input-group > .input:invalid,
.input-group > .input:invalid,
.validate .input-group > * > .input:valid,
.input-group > * > .input:valid,
.validate .input-group > * > .input:invalid,
.input-group > * > .input:invalid,
.input-group > .input.is-valid,
.input-group > .input.is-invalid,
.input-group > * > .input.is-valid,
.input-group > * > .input.is-invalid {
    border-width: 0px;
}

.validate .input-group > .input:valid:focus-within,
.input-group > .input:valid:focus-within,
.validate .input-group > .input:invalid:focus-within,
.input-group > .input:invalid:focus-within,
.validate .input-group > * > .input:valid:focus-within,
.input-group > * > .input:valid:focus-within,
.validate .input-group > * > .input:invalid:focus-within,
.input-group > * > .input:invalid:focus-within,
.input-group > .input.is-valid:focus-within,
.input-group > .input.is-invalid:focus-within,
.input-group > * > .input.is-valid:focus-within,
.input-group > * > .input.is-invalid:focus-within {
    --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
    --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color);
    box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
}

.validate .input-group > .input:valid:focus,
.input-group > .input:valid:focus,
.validate .input-group > .input:invalid:focus,
.input-group > .input:invalid:focus,
.validate .input-group > * > .input:valid:focus,
.input-group > * > .input:valid:focus,
.validate .input-group > * > .input:invalid:focus,
.input-group > * > .input:invalid:focus,
.input-group > .input.is-valid:focus,
.input-group > .input.is-invalid:focus,
.input-group > * > .input.is-valid:focus,
.input-group > * > .input.is-invalid:focus {
    --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
    --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width)) var(--tw-ring-color);
    box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
}

.input-group:has(.is-valid),
  .validate .input-group:has(.input:valid) {
    --tw-border-opacity: 1;
    border-color: var(--fallback-su,oklch(var(--su)/var(--tw-border-opacity, 1)));
}

.input-group:has(.is-valid):has(:focus),
    .input-group:has(.is-valid):has(:focus-within),
    .validate .input-group:has(.input:valid):has(:focus),
    .validate .input-group:has(.input:valid):has(:focus-within) {
    --tw-border-opacity: 1;
    border-color: var(--fallback-su,oklch(var(--su)/var(--tw-border-opacity, 1)));
    --tw-shadow: 0 1px 2px 0 var(--fallback-bs,oklch(var(--bs)/0.22));
    --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);
    box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
    --tw-shadow-color: var(--fallback-su,oklch(var(--su)/0.22));
    --tw-shadow: var(--tw-shadow-colored);
    --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
    --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);
    box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
    --tw-ring-opacity: 1;
    --tw-ring-color: var(--fallback-su,oklch(var(--su)/var(--tw-ring-opacity, 1)));
}

.input-group:has(.is-invalid),
  .validate .input-group:has(.input:invalid) {
    --tw-border-opacity: 1;
    border-color: var(--fallback-er,oklch(var(--er)/var(--tw-border-opacity, 1)));
}

.input-group:has(.is-invalid):has(:focus),
    .input-group:has(.is-invalid):has(:focus-within),
    .validate .input-group:has(.input:invalid):has(:focus),
    .validate .input-group:has(.input:invalid):has(:focus-within) {
    --tw-border-opacity: 1;
    border-color: var(--fallback-er,oklch(var(--er)/var(--tw-border-opacity, 1)));
    --tw-shadow: 0 1px 2px 0 var(--fallback-bs,oklch(var(--bs)/0.22));
    --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);
    box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
    --tw-shadow-color: var(--fallback-er,oklch(var(--er)/0.22));
    --tw-shadow: var(--tw-shadow-colored);
    --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
    --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);
    box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
    --tw-ring-opacity: 1;
    --tw-ring-color: var(--fallback-er,oklch(var(--er)/var(--tw-ring-opacity, 1)));
}

.input-group-filled:has(.is-valid),
  .validate .input-group-filled:has(.input:valid) {
    --tw-border-opacity: 1;
    border-color: var(--fallback-su,oklch(var(--su)/var(--tw-border-opacity, 1)));
}

.input-group-filled:has(.is-valid):focus ~ .input-filled-focused,
    .input-group-filled:has(.is-valid):focus-within ~ .input-filled-focused,
    .validate .input-group-filled:has(.input:valid):focus ~ .input-filled-focused,
    .validate .input-group-filled:has(.input:valid):focus-within ~ .input-filled-focused {
    --tw-scale-x: 1;
    --tw-scale-y: 1;
    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
    --tw-bg-opacity: 1;
    background-color: var(--fallback-su,oklch(var(--su)/var(--tw-bg-opacity, 1)));
}

.input-group-filled:has(.is-invalid),
  .validate .input-group-filled:has(.input:invalid) {
    --tw-border-opacity: 1;
    border-color: var(--fallback-er,oklch(var(--er)/var(--tw-border-opacity, 1)));
}

.input-group-filled:has(.is-invalid):focus ~ .input-filled-focused,
    .input-group-filled:has(.is-invalid):focus-within ~ .input-filled-focused,
    .validate .input-group-filled:has(.input:invalid):focus ~ .input-filled-focused,
    .validate .input-group-filled:has(.input:invalid):focus-within ~ .input-filled-focused {
    --tw-scale-x: 1;
    --tw-scale-y: 1;
    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
    --tw-bg-opacity: 1;
    background-color: var(--fallback-er,oklch(var(--er)/var(--tw-bg-opacity, 1)));
}
